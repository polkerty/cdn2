(function() {

  // Localize jQuery variable
  var calc_script = getScript(); // run this early before document loaded
  var jQuery;
  var domain = "calculatorpro.com";
  var apiDomain = "api.calculatorpro.com";
  var calculator = null;
  var protocol = window.location.protocol;
  var defaults = {
    backcolor: '#378CAF',
    bordcolor: '#006395',
    textcolor: '#ffffff',
    calcwidth: '260px', 
    textsize: '16px'
  }

  // used to change state of template - attached to calculator object
  var stateDefaults = {
    preAnswer: null,
    answer: null,
    loadingError: null,
    showAnswer: false,
    showLoading: true,
    showLeadForm: false,
    minHeight: null,
    minHeightInner: null
  }

  /******** Load jQuery if not present *********/
  if (window.jQuery === undefined || window.jQuery.fn.jquery !== '1.8.2') {
    var script_tag = document.createElement('script');
    script_tag.setAttribute("type","text/javascript");
    script_tag.setAttribute("src", "//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js");
    if (script_tag.readyState) {
      script_tag.onreadystatechange = function () { // For old versions of IE
        if (this.readyState == 'complete' || this.readyState == 'loaded') {
          scriptLoadHandler();
        }
      };
    } else {
      script_tag.onload = scriptLoadHandler;
    }
    // Try to find the head, otherwise default to the documentElement
    (document.getElementsByTagName("head")[0] || document.documentElement).appendChild(script_tag);
  } else {
    // The jQuery version on the window is the one we want to use
    jQuery = window.jQuery;
    main();
  }

  /******** Called once jQuery has loaded ******/
  function scriptLoadHandler() {
    // Restore $ and window.jQuery to their previous values and store the
    // new jQuery in our local jQuery variable
    jQuery = window.jQuery.noConflict(true);
    // Call our main function
    main(); 
  }

  /******** Our main function ********/
  function main() { 
    loadLibraries();
    jQuery(document).ready(function($) { 
      var container = findContainer(calc_script);
      var options = $(container).data();

      loadCSS();
      if(options.hash) {
        var jsonp_url = ( protocol == 'https:' ? protocol : 'http:' ) + "//" + apiDomain +  "/embed/" + options.hash + "?callback=?"; 
      } else if( options.calcid) {
        var jsonp_url = ( protocol == 'https:' ? protocol : 'http:' ) + "//" + apiDomain +  "/calc/" + options.calcid + "?callback=?"; 
      }
      $.getJSON(jsonp_url, { normalized: true }, function(calc_json) {
        calculator = calc_json;
        var customizations = $.extend(true,{},calculator.customizations);
        calculator.customizations = null;

        // set defaults
        $.extend(true, calculator, $.extend(true, defaults, customizations));
        

        // clone the defaults instead of passing a reference
        calculator.state = $.extend({}, stateDefaults);
        calculator.cleanslate = true;

        // create for handlebars later
        calculator.calculator = {
          id: calculator.id,
          hash: options.hash,
          answerFormat: calculator.answerFormat
        };
        delete calculator.id;
        delete calculator.answerFormat;

        // override fields with customizations if necessary
        overrideFields(calculator);

        calculator.numFields = calculator.fields.length;
        calculator.showLink = calculator.anchor != (-1 * (calculator.calculator.id * 7 + 36))
        calculator.dev_domain = domain; 
        calculator.tag = getTag(calculator.anchor, calculator.anchorTags, calculator.title);

        // ensure match of custom fields
        if (calculator.custinputs != undefined && calculator.custinputs.length != calculator.fields.length + 1) { // allow for title
          calculator.custinputs = undefined;
        }

        renderCalculator();
      });


      function renderCalculator() {
        // render calculator
        console.log(calculator);
        console.log(CP.Templates["js/templates/widget.hbs"](calculator));
        
        $(container).html(CP.Templates["js/templates/widget.hbs"](calculator)); // this is where the loaded widget will go
        
        $scr = $(".script",container).toArray();
        for (var i=0; i<$scr.length; ++i ) {
        	eval($scr[i].innerHTML);
        }

        // any jquery setup here
        if (calculator.has_leads === true && calculator.phone_number_enabled) {
          $('#cp_leads_required_phone_number').mask('(999) 999-9999');
        }
      }

      function getTag(anchorIndex, tags, title) {
        if (anchorIndex == undefined || anchorIndex < 0) {
          return 'CalculatorPro.com';
        } else {
          var arrayStr = 'Free Calculator,Free Online Calculator,CalculatorPro.com,www.CalculatorPro.com,CalculatorPro,Calculator Pro,Online Calculator,Get this Widget,Get this Calculator,See more Calculators,See more Widgets,Get a Free Widget,Find more Calculators,Browse other Calculators,Need a Similar Calculator?,Embed this Calculator,Find Similar Calculators,Get Free Calculators';
          if (tags != false) {
            arrayStr += ',' + tags;
          }
          arrayStr += ',' + title;
          var anchorArray = arrayStr.split(',');
          if (anchorIndex >= anchorArray.length) {
            return 'CalculatorPro.com';
          }
          return $.trim(anchorArray[anchorIndex]);
        }
      }

      function currencyReplace(inputString) {
        return ( calculator.currencysymbol != undefined ? (inputString.replace(/\$/g,calulator.currencysymbol)) : inputString );
      }

      function overrideFields(fields) {
        var normalizedFields = [];
        var optIndex = 0;
        $.each(calculator.fields, function(index, field) {
          var normalized = field;
          normalized.label = $.trim(calculator['label' + index] || field.label);
          normalizedFields.push(normalized);
          if(field.options) {
            $.each(field.options, function(index2, option) {
              option.label = $.trim(calculator['option' + optIndex++] || option.label);
              // cached API responses may not have a value in the JSON yet.
              if(!option.value) { option.value = option.label; }
            });
          }
        });
        return normalizedFields;
      }

      // will try all the replacements on the string to see if there is a match
      function auxiliaryReplace(inputString) {
        if (calculator.auxileryreplace != undefined && calculator.optionalTranslations != undefined) {
          for (var i = 0; i < calculator.auxileryreplace.length; ++i) {
            if (calculator.auxileryreplace[i] != "" && calculator.optionalTranslations[i] != "" && calculator.auxileryreplace[i] != calculator.optionalTranslations[i]) {
              inputString = inputString.replace(calculator.optionalTranslations[i], calculator.auxileryreplace[i]);
            }
          }
        }
        return inputString;
      }

      // freeze the widget minimum height just once
      function setWidgetHeight(form, widgetsubmit) {
        if (!calculator.state.minHeight) {
          if ( !($.browser.msie && $.browser.version.slice(0,1) <= 9 && $.browser.version.slice(0,1) >= 3) ) {
            calculator.state.minHeight = form.height();
          }
        }
        if (!calculator.state.minHeightInner) {
          var height = widgetsubmit.parent().outerHeight(true) + widgetsubmit.outerHeight(true) + 3; // vertical padding
          if ( $.browser.msie && $.browser.version.slice(0,1) <= 7 && $.browser.version.slice(0,1) >= 3 && height > 63 ) {
            height = height - 63;
          }
          calculator.state.minHeightInner = height;
        }
      }

      function hasValidLeadInfo(form) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        var passed_tests = true;

        if (calculator.first_name_enabled === true && form.find("[name='input_required_fname']").val() === "") {
          passed_tests = false;
        }
        if (calculator.last_name_enabled === true && form.find("[name='input_required_lname']").val() === "") {
          passed_tests = false;
        }
        if (calculator.phone_number_enabled === true && form.find("[name='input_required_phone']").val() === "") {
          passed_tests = false;
        }
        if (calculator.email_address_enabled === true && re.test(form.find("[name='input_required_email']").val()) === false) {
          passed_tests = false;
        }
        if (calculator.zip_code_enabled === true && form.find("[name='input_required_zip']").val() === "") {
          passed_tests = false;
        }

        return passed_tests;
      }

      function submitAnswer(dataObj) {
        if (calculator.formattableanswer != undefined) {
          dataObj += '&formattedAnswer=' + encodeURIComponent(calculator.formattableanswer);
        }

        var widget_url = ( ( protocol == 'https:' && calculator.has_enterprise == true ) ? protocol : 'http:' ) + "//" + apiDomain + "/calculate?callback=?";

        return $.ajax({
          url: widget_url,
          dataType: 'json',
          data: dataObj
        });
      }

      function loadCSS() {
        var css_link = $("<link>", { 
          rel: "stylesheet", 
            type: "text/css", 
            href: "http://" + domain + "/wp-content/plugins/calcs/css/widgetV4.css"
        });

        var cleanslate_link = $("<link>", { 
          rel: "stylesheet", 
            type: "text/css", 
            href: "//calculatorpro.s3.amazonaws.com/cleanslate.css" 
        });

        cleanslate_link.appendTo('head');
        css_link.appendTo('head');
      }

      function findContainer(current) {
        while (!$(current).is('div')) {
          var toDelete = current;
          var temp = $(current).prev();
          if ($(temp).length == 0) {
            current = $(current).parent();
          } else {
            current = temp;
          }
          if ($(toDelete).is('a') || $(toDelete).is('br')) {
            $(toDelete).remove();
          }
          if ($(toDelete).is('p') && $(toDelete).has('a')) {
            $(toDelete).find('a').remove(); // keep the actual p tag
          }
        }
        return current[0]; 
      }

      function updateInputs(formInputs) {
        var formObj = {};

        // convert form array to key/value
        for (var i = 0; i < formInputs.length; ++i) {
          formObj[formInputs[i].name] = formInputs[i].value;
        }

        for (var i = 0; i < calculator.numFields; ++i) {
          var key = 'input' + i;
          if (calculator.fields[i].select === true) {
            for (var n = 0; n < calculator.fields[i].options.length; ++n) {
              if (calculator.fields[i].options[n].label === formObj[key]) {
                calculator.fields[i].options[n].selected = true;
              } else {
                calculator.fields[i].options[n].selected = false;
              }
            }
          }
          if (calculator.fields[i].input === true) {
            calculator.fields[i].value = formObj[key];
          }
        }
      }

      // click handler - reload template instead of manual hide/show
      $(container).on('click', '.widgetForm .widgetSubmit', function(e) {
        e.preventDefault();
        var form = $(this).closest('form');
        var widgetsubmit = $(this);

        // update the default input values
        updateInputs(form.serializeArray());

        // freeze widget height with min-height
        setWidgetHeight(form, widgetsubmit);

        if(calculator.has_leads) {
          if(!calculator.state.showLeadForm) {
            calculator.state.showLeadForm = true;
            renderCalculator();
            return false;
          } else {
            if(!hasValidLeadInfo(form)) {
              return false;
            }
          }
        }

        calculator.state.showLeadForm = false;
        calculator.state.showAnswer = true;

        var dataObj = form.serialize();

        renderCalculator();

        submitAnswer(dataObj)
        .done(function(data) { 
          calculator.state.preAnswer = currencyReplace(data.before_answer);
          calculator.state.answer = auxiliaryReplace(currencyReplace(data.answer)) + ' ' + currencyReplace(data.after_answer);
          calculator.state.showLoading = false;
          renderCalculator();
        })
        .fail(function(jqXHR) {
          calculator.state.loadingError = 'An error occured, please check your inputs.';
          renderCalculator();
        });

        return false;
      });

      $(container).on('click', '.widgetForm .backButton', function(e) {
        //e.preventDefault();
        calculator.state = jQuery.extend({}, stateDefaults);
        renderCalculator();
        return false;
      });

    });

  }

  function getScript() {
    var forWordpress = document.getElementById('wordpress_preview_calc_unique');
    if (forWordpress) {
      return forWordpress;
    }
    var scripts = document.getElementsByTagName('script');
    var index = scripts.length - 1;
    return scripts[index];
  }

  function loadLibraries() {
    /*
      Masked Input plugin for jQuery
      Copyright (c) 2007-2013 Josh Bush (digitalbush.com)
      Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
      Version: 1.3.1
    */
    (function(e){function t(){var e=document.createElement("input"),t="onpaste";return e.setAttribute(t,""),"function"==typeof e[t]?"paste":"input"}var n,a=t()+".mask",r=navigator.userAgent,i=/iphone/i.test(r),o=/android/i.test(r);e.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn",placeholder:"_"},e.fn.extend({caret:function(e,t){var n;if(0!==this.length&&!this.is(":hidden"))return"number"==typeof e?(t="number"==typeof t?t:e,this.each(function(){this.setSelectionRange?this.setSelectionRange(e,t):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",e),n.select())})):(this[0].setSelectionRange?(e=this[0].selectionStart,t=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),e=0-n.duplicate().moveStart("character",-1e5),t=e+n.text.length),{begin:e,end:t})},unmask:function(){return this.trigger("unmask")},mask:function(t,r){var c,l,s,u,f,h;return!t&&this.length>0?(c=e(this[0]),c.data(e.mask.dataName)()):(r=e.extend({placeholder:e.mask.placeholder,completed:null},r),l=e.mask.definitions,s=[],u=h=t.length,f=null,e.each(t.split(""),function(e,t){"?"==t?(h--,u=e):l[t]?(s.push(RegExp(l[t])),null===f&&(f=s.length-1)):s.push(null)}),this.trigger("unmask").each(function(){function c(e){for(;h>++e&&!s[e];);return e}function d(e){for(;--e>=0&&!s[e];);return e}function m(e,t){var n,a;if(!(0>e)){for(n=e,a=c(t);h>n;n++)if(s[n]){if(!(h>a&&s[n].test(R[a])))break;R[n]=R[a],R[a]=r.placeholder,a=c(a)}b(),x.caret(Math.max(f,e))}}function p(e){var t,n,a,i;for(t=e,n=r.placeholder;h>t;t++)if(s[t]){if(a=c(t),i=R[t],R[t]=n,!(h>a&&s[a].test(i)))break;n=i}}function g(e){var t,n,a,r=e.which;8===r||46===r||i&&127===r?(t=x.caret(),n=t.begin,a=t.end,0===a-n&&(n=46!==r?d(n):a=c(n-1),a=46===r?c(a):a),k(n,a),m(n,a-1),e.preventDefault()):27==r&&(x.val(S),x.caret(0,y()),e.preventDefault())}function v(t){var n,a,i,l=t.which,u=x.caret();t.ctrlKey||t.altKey||t.metaKey||32>l||l&&(0!==u.end-u.begin&&(k(u.begin,u.end),m(u.begin,u.end-1)),n=c(u.begin-1),h>n&&(a=String.fromCharCode(l),s[n].test(a)&&(p(n),R[n]=a,b(),i=c(n),o?setTimeout(e.proxy(e.fn.caret,x,i),0):x.caret(i),r.completed&&i>=h&&r.completed.call(x))),t.preventDefault())}function k(e,t){var n;for(n=e;t>n&&h>n;n++)s[n]&&(R[n]=r.placeholder)}function b(){x.val(R.join(""))}function y(e){var t,n,a=x.val(),i=-1;for(t=0,pos=0;h>t;t++)if(s[t]){for(R[t]=r.placeholder;pos++<a.length;)if(n=a.charAt(pos-1),s[t].test(n)){R[t]=n,i=t;break}if(pos>a.length)break}else R[t]===a.charAt(pos)&&t!==u&&(pos++,i=t);return e?b():u>i+1?(x.val(""),k(0,h)):(b(),x.val(x.val().substring(0,i+1))),u?t:f}var x=e(this),R=e.map(t.split(""),function(e){return"?"!=e?l[e]?r.placeholder:e:void 0}),S=x.val();x.data(e.mask.dataName,function(){return e.map(R,function(e,t){return s[t]&&e!=r.placeholder?e:null}).join("")}),x.attr("readonly")||x.one("unmask",function(){x.unbind(".mask").removeData(e.mask.dataName)}).bind("focus.mask",function(){clearTimeout(n);var e;S=x.val(),e=y(),n=setTimeout(function(){b(),e==t.length?x.caret(0,e):x.caret(e)},10)}).bind("blur.mask",function(){y(),x.val()!=S&&x.change()}).bind("keydown.mask",g).bind("keypress.mask",v).bind(a,function(){setTimeout(function(){var e=y(!0);x.caret(e),r.completed&&e==x.val().length&&r.completed.call(x)},0)}),y()}))}})})(jQuery);
  }
})(); // We call our anonymous function immediately
